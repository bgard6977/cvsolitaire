{"config":{"output_file":null,"full_docs":false,"pub_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_name":"adler32","crate_root":"/Users/bgardner/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.0/src","external_crates":[{"name":"panic_unwind","num":11,"file_name":"/Users/bgardner/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.0/src/lib.rs"},{"name":"unwind","num":8,"file_name":"/Users/bgardner/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.0/src/lib.rs"},{"name":"std_unicode","num":5,"file_name":"/Users/bgardner/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.0/src/lib.rs"},{"name":"core","num":2,"file_name":"/Users/bgardner/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.0/src/lib.rs"},{"name":"alloc_jemalloc","num":10,"file_name":"/Users/bgardner/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.0/src/lib.rs"},{"name":"libc","num":7,"file_name":"/Users/bgardner/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.0/src/lib.rs"},{"name":"alloc","num":4,"file_name":"/Users/bgardner/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.0/src/lib.rs"},{"name":"std","num":1,"file_name":"/Users/bgardner/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.0/src/lib.rs"},{"name":"compiler_builtins","num":9,"file_name":"/Users/bgardner/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.0/src/lib.rs"},{"name":"alloc_system","num":6,"file_name":"/Users/bgardner/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.0/src/lib.rs"},{"name":"rand","num":3,"file_name":"/Users/bgardner/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.0/src/lib.rs"}],"span":{"file_name":[47,85,115,101,114,115,47,98,103,97,114,100,110,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,100,108,101,114,51,50,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":8749,"line_start":1,"line_end":276,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,98,103,97,114,100,110,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,100,108,101,114,51,50,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":8749,"line_start":1,"line_end":276,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/bgardner/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":20}],"decl_id":null,"docs":" A minimal implementation of Adler32 for Rust.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11},"span":{"file_name":[47,85,115,101,114,115,47,98,103,97,114,100,110,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,100,108,101,114,51,50,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2931,"byte_end":2945,"line_start":87,"line_end":87,"column_start":12,"column_end":26},"name":"RollingAdler32","qualname":"::RollingAdler32","value":"RollingAdler32 {  }","parent":null,"children":[{"krate":0,"index":2147483672},{"krate":0,"index":2147483673}],"decl_id":null,"docs":" A rolling version of the Adler32 hash, which can 'forget' past bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":[47,85,115,101,114,115,47,98,103,97,114,100,110,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,100,108,101,114,51,50,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3064,"byte_end":3067,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<RollingAdler32>::new","value":"fn () -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":[47,85,115,101,114,115,47,98,103,97,114,100,110,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,100,108,101,114,51,50,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3201,"byte_end":3211,"line_start":99,"line_end":99,"column_start":12,"column_end":22},"name":"from_value","qualname":"<RollingAdler32>::from_value","value":"fn (adler32: u32) -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":[47,85,115,101,114,115,47,98,103,97,114,100,110,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,100,108,101,114,51,50,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3446,"byte_end":3457,"line_start":106,"line_end":106,"column_start":12,"column_end":23},"name":"from_buffer","qualname":"<RollingAdler32>::from_buffer","value":"fn (buffer: &[u8]) -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":[47,85,115,101,114,115,47,98,103,97,114,100,110,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,100,108,101,114,51,50,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3640,"byte_end":3644,"line_start":113,"line_end":113,"column_start":12,"column_end":16},"name":"hash","qualname":"<RollingAdler32>::hash","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":[47,85,115,101,114,115,47,98,103,97,114,100,110,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,100,108,101,114,51,50,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3792,"byte_end":3798,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"remove","qualname":"<RollingAdler32>::remove","value":"fn (&mut self, size: usize, byte: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":[47,85,115,101,114,115,47,98,103,97,114,100,110,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,100,108,101,114,51,50,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4072,"byte_end":4078,"line_start":125,"line_end":125,"column_start":12,"column_end":18},"name":"update","qualname":"<RollingAdler32>::update","value":"fn (&mut self, byte: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":[47,85,115,101,114,115,47,98,103,97,114,100,110,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,100,108,101,114,51,50,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4305,"byte_end":4318,"line_start":132,"line_end":132,"column_start":12,"column_end":25},"name":"update_buffer","qualname":"<RollingAdler32>::update_buffer","value":"fn (&mut self, buffer: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":[47,85,115,101,114,115,47,98,103,97,114,100,110,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,100,108,101,114,51,50,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5871,"byte_end":5878,"line_start":186,"line_end":186,"column_start":8,"column_end":15},"name":"adler32","qualname":"::adler32","value":"fn <R> (mut reader: R) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Consume a Read object and returns the Adler32 hash.\n","sig":null,"attributes":[]}],"impls":[],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,98,103,97,114,100,110,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,100,108,101,114,51,50,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2980,"byte_end":2994,"line_start":92,"line_end":92,"column_start":6,"column_end":20},"kind":"Impl","from":{"krate":0,"index":11},"to":{"krate":4294967295,"index":4294967295}}]}